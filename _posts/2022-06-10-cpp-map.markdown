---
layout: post
title:  "Functional map() in C++"
date:   2022-06-10
---


{% highlight c++ %}
template<typename T, typename F, template <typename...> typename C, typename... Args>
decltype(auto) map(const C<T, Args...>& coll, F f) {
  C<decltype(f(*coll.begin()))> res(coll.size());
  transform(coll.cbegin(), coll.cend(), res.begin(), f);
  return res;
}
{% endhighlight %}

- without `Args...` it fails on `could not deduce template argument for 'const C<T> &' from 'std::vector<string,std::allocator<string>>'`
- should use `back_inserter` instead of `res.begin()`? `back_inserter` uses `push_back`, which auto-resizes the collection, but since size of result collection is known it's better to pre-allocate and use `begin()`?

## Methods for passing functions

[https://vittorioromeo.info/index/blog/passing_functions_to_functions.html](https://vittorioromeo.info/index/blog/passing_functions_to_functions.html)

1. function pointers `void foo(void(*bar)(int)) { ... }`
   - `+` compiler optimizable
   - `-` cannot pass lambdas / generic callable objects (?)

2. template params
  - `+` compiler optimized / no overhead
  - `-` binary bloat

3. `std::function` - too much runtime overhead?

## decltype(auto)
delay type deduction in recursive templates (?)

{% highlight c++ %}
int i;
int&& f();
auto x3a = i;                  // decltype(x3a) is int
decltype(auto) x3d = i;        // decltype(x3d) is int
auto x4a = (i);                // decltype(x4a) is int
decltype(auto) x4d = (i);      // decltype(x4d) is int&
auto x5a = f();                // decltype(x5a) is int
decltype(auto) x5d = f();      // decltype(x5d) is int&&
auto x6a = { 1, 2 };           // decltype(x6a) is std::initializer_list<int>
decltype(auto) x6d = { 1, 2 }; // error, { 1, 2 } is not an expression
auto *x7a = &i;                // decltype(x7a) is int*
decltype(auto)*x7d = &i;       // error, declared type is not plain decltype(auto)
{% endhighlight %}

perfect return type forwarding:
{% highlight c++ %}
template<class Fun, class... Args>
decltype(auto) Example(Fun fun, Args&&... args) {
    return fun(std::forward<Args>(args)...);
}
{% endhighlight %}
