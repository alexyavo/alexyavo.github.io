---
layout: post
title:  "VI"
date:   2022-05-27
---

`:h` `:help`

`.` repeat last command
`C-g` show status

`ZZ` `:x` `:wq` save current file & exit
`ZQ` exit without saving

`:w` save current file
`:wa` save all files

`q:` command history
`q/` search history

`:display` show registers
`:pwd`

`:set list` / `:set nolist` show/hide whitespace

`<leader>` is mapped to `\` by default (`:help leader`)
to change leader: `let mapleader = ","`

## Text Editing ##
`i` insert before cursor
`a` insert after cursor

`A` insert @ end of line
`I` insert @ start of line

`o` begin a new line below the cursor and insert text
`O` same, above cursor

`gu` lowercase
`gU` uppercase
`g~` switch case

`C-r` redo
`u` undo

`C-v` block visual mode
`V` line visual mode
(when in visual mode, `I` for insert-mode, then ESC to apply inserts across all lines.)

`V{line_no}G` select lines upto `{line_no}`

`=` re-indent
`gqq` format/wrap line (control w/ `:set tw=80`)

`y` yank selection
`yy` yank current line including newline
`{n}yy` yank `n` lines
`:%y` yank entire file

`"*y` copy to clipboard
`"*p` paste from clipboard
`gg"+yG` - copy entire file to clipboar (`+` is clipboard buffer)

`p` paste yanked / deleted content
`P` paste before cusror

`x` delete character
`X` delete character backwards
`s` delete character and enter insert

`db` delete word backwords
`de` delete word forwards

`d$` `D` delete to end of line
`dh` delete one char backward
`dd` delete line
`dj` delete two lines

`dt{c}` delete from current position till just before `{c}`
`df{c}` delete from current position to (and including) `{c}`

`di{char}` delete inside area surrounded by `{char}` (e.g. `di"` deletes within double-quotes)
`da{char}` deletes area within `{char}` as well as `{char}`s

`dit` delete inside html tag
`dat` delete outer html tag

`dib` delete a block surrounded by (
`diB` delete a block surrrouned by {

`das` delete a sentence
`dap` delete a paragraph

`dG` delete from current position to end of file

also: `dvj` etc, `v` toggles inclusivity (`:h inclusive`)

`{n}dd` delete `n` lines
`d{n}gg` delete from current line to line `n`
`:{a},{b}d` delete lines `a` to `b`
`:,{b}d` delete lines from current until `b`

`daw` delete word under cursor
`caw` delete word under cursor and enter insert mode

`ggdG` delete everything

`cc` `S` delete current line and start insert mode
`ce` "change" motion: will delete the next word and put you in insert mode
(also, `c$` etc)

`cc`, `dd`, `yy` apply to current line

`C-w` (in insert mode) delete last word

`:r filename` insert content of filename
`23:r filename` insert after line 23

`rx` replace char under cursor with x

`>` indent
`V` (visual mode) -> `>` indent block

`>iB` indent curly block (from anywhere in the block)
`>%` indent curly block, cursor on one of braces

`=iB` format curly block
`=%` format block, put cursor on one of braces

`:'<,'>s/$/{msg}/` insert `{msg}` at end of selected lines (w/ `V`)

`:4,8>` indent lines 4 to 8, inclusive
`set sw=4` setwidth

### Macros / Recording ###

`:help recording`

- start recording with `q{letter}`
- end recording with `q` again

records everything you type (search, movement, replacement)

replay w/ `@{letter}`

`{letter}` designates a register, the same registers used by delete, yank and put. This means you can yank text into a register and then execute it as a command.

`@@` repeat macro
`100@m` repeat macro recorded to `m` 100 times

`nnoremap <leader>1 yypVr=`
- Yank/copy the current line.
- Paste it below (and move down to the pasted version).
- Select the copied line.
- Replace every character with =.

### Registers ###

`"` is the command to use a register for the next command

`"kyy` copy current line to register `k`
`"Kyy` append

`"kp` paste contents of register `k`

`:reg` display contents of all registers

if you yank text without assigning it to a particular register, it will be assigned to the `0` register, as well as the default `"` register.

`"0` vs `""`: `"0` populated w/ only yanked text, while `""` also contains deleted text (from d/x/c/s)

register `"1` holds last deletion / change(?)
register `"2` holds second last deletion / change(?)
etc. (up to `"9`)

`"*` or `"+` clipboard
`"/` last search command
`":` last command-line command
`"_` is the `/dev/null` of registers (`noremap x "_x` deletes single chars without updating default register)

while in ex-mode command (?), `C-r {register}` to paste the contents of `{register}` (e.g. useful for search/replace, pasting the string you want to replace)

### Markers ###

`'a` point to beginning of line of the marker
`a points to exact location

#### Comment out a block ####

1. mark w/ `ma`
2. go to end of block
3. `:'a,.s/^/#`

#### Move a Block w/ markers ####

1. mark w/ `ma`
2. go to end of block, `mb`
3. go to target location, `:'a,'bmo .`

#### Yank to a register ####

1. mark w/ `ma`
2. go to end of block
3. `:'a,.ya a` yank block into register `a`
4. `:'a,.ya A` append block to contents of register `a`

#### Delete all lines from current to marked one ####

goto starting line and type `ma` (mark a)
then goto last line and `d'a` (delete to mark a)

### Find Replace ###

[https://vim.fandom.com/wiki/Search_and_replace](https://vim.fandom.com/wiki/Search_and_replace)

`:s/foo/bar/g` replace foo w/ bar in current line
`:%s/foo/bar/g` replace ... in all lines
`:%s/foo/bar/gc` replace in all lines + ask for confirmation
`:%s/\<foo\>/bar/gc` whole words + confirm
`:%s/foo/bar/gci` case insensitive + confirm

`:%s/\<\@!\([A-Z]\)/\-\l\1/g` replace `camelCaseName` to `camel-case-name`

### Rename Variable ###

- place caret on variable usage
- `gd` goto local definition
- `[{` goto start of scope
- `V` visual select
- `%` goto end of scope
- `:'<,'>s//newname/gc` search & replace w/ confirm


## Windows / Buffers ##
`C-w v` vertical split
`C-w s` horizontal split

`C-w w` next window (?)
`C-w o` close other windows / keep active window only
`C-w c` close current window (keep buffer open)

`C-w r` move current window to the right
`C-w =` make all splits equal size

`C-w -/+` resize height (`{n}C-w -`)
`C-w >/<` resize width

`:ls` list buffers
`:b1` goto buffer #1
`:bn` next buffer
`:bd` delete buffer
`:bw` wipe buffer (difference from `:bdelete` ?)

`:enew` create empty buffer
`:new` or `C-w n` new window & buffer in horizontal split
`:vnew` same as `:new` but vertical split

`:file <name>` name buffer
`:0f` clear buffer name

`:q` close window + buffer (?)

`:vertical sball` open all buffers in vertical split

## Tabs ##
`:Tex` open new tab and open fs browser
`:tabnew <filepath>`

`gt` next tab
`gT` prev tab
`{n}gt` switch to tab `n`

`:tabl` last tab
`:tabclose`

## Text Navigation ##
`:help mark-motions`
`:help jump-motions`

`:set relativenumber number` relative line numbers + display curr line num

(line movements compat w/ emacs)
`j` `C-n` move line down
`k` `C-p` move line up

`5j` jump 5 lines down
`5k` jump 5 lines up

`gj` `gk` navigate wrapped lines

`zz` move current line to middle of screen
`zt` move current line to top of screen
`zb` move current line to bottom of screen

`H` move caret top line (HIGH)
`M` move caret middle line (MIDDLE)
`L` move caret bottom line (LOW)

`C-y` move screen up one line
`C-e` move screen down one line
`C-u` move cursor & screen up 1/2 page
`C-d` move cursor & screen down 1/2 page
`C-b` move screen up one page, cursor to last line
`C-f` move screen down one page, cursor to first line

`$` goto the end of the current line.
`0` goto the starting of the current line.
`^` goto the first non blank character of the line.
(alt: `0w` skips whitespace too, easier to use)

`''` goto last location (start of line)
\`\` goto last location

`mk` mark current position as k (can be any letter)
`k return to position "k"

`H` goto the first line of current screen.
`L` goto the last line of current screen.

`e` move cursor to last char of current word
`w` next word
`b` prev word (the inverse of `w`)
`ge` back to end of word
`gE` back to end of WORD
(also: `E`, `B`, `W` for jumping WORDS)

word: `A-Z a-z 0-9 _`
WORD: word + `~!@#$%^&*()-=+[{]};:"\|,<.>/?`

`{` start of paragraph
`}` end of paragraph

`gg` start of file
`G` end of file
`:42` `42gg` `42G` goto line 42 (absolute)

`f{char}` jump to next occurrence of {char} in line
`F{char}` jump to prev ...

`t{c}` same as `f{c}` but lands just before `{c}`
`T{c}` same as `F{c}` but lands just after `{c}`

`*` goto next occurance of word under cursor
`#` goto prev occurance of word under cursor

`%` goto matching parens
`[{` goto scope start

`set path=$PWD/**` and then `:find filename` (+tab completion)

`gi` insert in same position where insert was last active

`gd` jump to local definition
`gf` jump to file under cursor
`C-]` jump to tag
`C-o` go back
`C-i` go fwd
(subdirsdetails: `:h jumplist`)

`:jumps` list all visited locations
current location is indicated w/ `>`

`/txt` search for next occurance
`?txt` search for prev occurance

`:hls` highlight all search matches
`:set nohlsearch` turn off the previous option completely
`:noh` turn off search highlight until next search

`:set ignorecase` use `\c` anywhere in search query to ignore case, `\C` to match case.

prefix `C-o` w/ a number to change jump dst: `<n>C-o`

## Filesystem Navigation ##
`:e file` open file
`:n file1 file2` multiple files
`:Ex ~` browse a dir to open file from
`:E` browse
`:Sex` horizontal split
`:Vex` vertical split
`:Tex` new tab + browse

## evil ##
{% highlight emacs-lisp %}
((use-package evil :ensure t
  :init
  (setq evil-want-C-u-scroll t)
  (setq evil-default-state 'normal) ;; 'emacs
  :config (evil-mode t))
{% endhighlight %}

### Doom Emacs
`g s j`, `g s k` evil-easymotion

`find-name-dired` too look for files under specified dir.

#### evil-lion (alternative to align-regex)

`evil-lion`: select lines, `gl<c>` will regex-align on `<c>` (`gL` will right-align)
instead of selecting lines works w/ `glib` (select block), `glip` (paragraph) etc.

example:

```
int x = 0;
int xx = 1;
int xxx = 2;
```

visual-select the three lines and then `gl=` or `gL=`

## TMUX ##

### Copy / Paste ### 
`C-\ [` enter copy mode 

- navigate w/ vi keys
- `SPACE` to start copying (WSL) (might be `C-SPACE` (?) elsewhere)
- `C-w` to copy (might be `M-w`)

`C-\ ]` paste

### Delay when pressing ESC ###

When running emacs+evil from within a tmux session, you get a delay after you press ESC (it thinks the ESC is a prefix and waits a second or so before it registers it as anactual ESC press, [more details](https://evil.readthedocs.io/en/latest/faq.html#problems-with-the-escape-key-in-the-terminal)).

to fix this, add to `~/.tmux.conf`: `set -s escape-time 0`

### Block/Beam cursor ###

Running regular vi in tmux session doesn't change cursor between beam/block when entering/exiting insert mode.

It seems the problem is that tmux doesn't send your cursor-changing escape codes to the terminal emulator. You need to wrap your desired escape codes in a special sequence that tells tmux that it should pass it on to the outer terminal.

try adding this to `~/.vimrc`:

{% highlight vim %}
if exists('$TMUX')
    let &t_SI = "\<Esc>Ptmux;\<Esc>\e[5 q\<Esc>\\"
    let &t_EI = "\<Esc>Ptmux;\<Esc>\e[2 q\<Esc>\\"
else
    let &t_SI = "\e[5 q"
    let &t_EI = "\e[2 q"
endif
{% endhighlight %}

escape code may be different for different terminal emulators.

## IdeaVIM ##

`~/.ideavimrc`

{% highlight vim %}
set clipboard+=unnamed
set relativenumber number
set ignorecase
{% endhighlight %}

## Config ##
`~/.vimrc`

{% highlight vim %}
syntax on
set showmatch
set ruler
set tabstop=2 softtabstop=0 expandtab shiftwidth=2 smarttab
set ai
set relativenumber number
set path=$PWD/**
set ignorecase
{% endhighlight %}

`tabstop` `ts` The width of a hard tabstop measured in "spaces" -- effectively the (maximum) width of an actual tab character.

`shiftwidth` `sw` The size of an "indent". It's also measured in spaces, so if your code base indents with tab characters then you want shiftwidth to equal the number of tab characters times tabstop. This is also used by things like the =, > and < commands.

`softtabstop` `sts` Setting this to a non-zero value other than tabstop will make the tab key (in insert mode) insert a combination of spaces (and possibly tabs) to simulate tab stops at this width.

`expandtab` `et` Enabling this will make the tab key (in insert mode) insert spaces instead of tab characters. This also affects the behavior of the retab command.

`smarttab` Enabling this will make the tab key (in insert mode) insert spaces or tabs to go to the next indent of the next tabstop when the cursor is at the beginning of a line (i.e. the only preceding characters are whitespace).

`:set ts?` (etc) gives current value of option
`:set vimrcpaths?`
`:set vimrc?`
