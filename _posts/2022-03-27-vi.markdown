---
layout: post
title:  "VI"
date:   2022-03-27 17:56:06 +0300
categories: text
---

`.` repeat last command
`C-g` show status

`ZZ` save & exit
`ZQ` exit without saving

`q:` command history
`q/` search history

`:display` show registers
`:pwd`

`:set list` / `:set nolist` show/hide whitespace

# Text Editing
`i` insert before cursor
`a` insert after cursor

`A` insert @ end of line
`I` insert @ start of line

`o` begin a new line below the cursor and insert text
`O` same, above cursor

`C-r` redo
`u` undo

`C-v` block visual mode
`V` line visual mode
(when in visual mode, `I` for insert-mode, then ESC to apply inserts across all lines.)

`V{line_no}G` select lines upto `{line_no}`

`=` re-indent
`gqq` wrap line (control w/ `:set tw=80`)

`y` yank selection
`yy` yank current line including newline
`{n}yy` yank `{n}` lines
`:%y` yank entire file
`+y` yank to clipboard
`gg"+yG` - copy entire file to clipboar (`+` is clipboard buffer)

`p` paste yanked / deleted content
`P` paste before cusror

`x` delete character

`dvb` delete word backwords (`v` toggles inclusivity, `:help inclusive` for details)
`de` delete word forwards
`d$` delete to end of line
`dd` delete line
`{n}dd` delete `n` lines
`dG` delete from here to end of file

`daw` delete word under cursor
`di"` delete inside double quotes
`dit` delete inside html tag
`dat` delete outer html tag
`dib` delete a block surrounded by (
`diB` delete a block surrrouned by {
`das` delete a sentence
`dap` delete a paragraph

`ggdG` delete everything

`cc` delete current line and start insert mode
`s` delete char under cursor and start insert mode

`ce` "change" motion: will delete the next word and put you in insert mode
(also, `c$` etc)

`cc`, `dd`, `yy` apply to current line

`C-w` (in insert mode) delete last word

`:r filename` insert content of filename
`23:r filename` insert after line 23

`rx` replace char under cursor with x

`>` indent
`V` (visual mode) -> `>` indent block

`>iB` indent curly block (from anywhere in the block)
`>%` indent curly block, cursor on one of braces

`=iB` format curly block
`=%` format block, put cursor on one of braces

`:4,8>` indent lines 4 to 8, inclusive
`set sw=4` setwidth

## Find Replace
[https://vim.fandom.com/wiki/Search_and_replace](https://vim.fandom.com/wiki/Search_and_replace)

`:s/foo/bar/g` replace foo w/ bar in current line
`:%s/foo/bar/g` replace ... in all lines
`:%s/foo/bar/gc` replace in all lines + ask for confirmation
`:%s/\<foo\>/bar/gc` whole words + confirm
`:%s/foo/bar/gci` case insensitive + confirm

## delete all lines from current to marked one
goto starting line and type `ma` (mark a)
then goto last line and `d'a` (delete to mark a)

# Windows / Buffers
`C-w v` vertical split
`C-w s` horizontal split

`C-w w` next window (?)
`C-w o` close other windows / keep active window only
`C-w c` close current window (keep buffer open)

`C-w r` move current window to the right
`C-w =` make all splits equal size

`C-w -/+` resize height (`{n}C-w -`)
`C-w >/<` resize width

`:ls` list buffers
`:b1` goto buffer #1
`:bn` next buffer
`:bd` delete buffer
`:bw` wipe buffer (difference from `:bdelete` ?)

`:enew` create empty buffer
`:new` or `C-w n` new window & buffer in horizontal split
`:vnew` same as `:new` but vertical split

`:file <name>` name buffer
`:0f` clear buffer name

`:q` close window + buffer (?)

`:vertical sball` open all buffers in vertical split

# Tabs
`:Tex` open new tab and open fs browser
`:tabnew <filepath>`

`gt` next tab
`gT` prev tab
`{n}gt` switch to tab `n`

`gd` jump to local definition
`C-]` jump to tag

`:tabl` last tab
`:tabclose`

# Text Navigation
`:help mark-motions`
`:help jump-motions`

`:set relativenumber` relative line numbers

`5j` jump 5 lines down
`5k` jump 5 lines up

`:42` goto line 42 (absolute)
`42gg`

`zz` move current line to middle of screen
`zt` move current line to top of screen
`zb` move current line to bottom of screen

`C-y` move screen up one line
`C-e` move screen down one line
`C-u` move cursor & screen up 1/2 page
`C-d` move cursor & screen down 1/2 page
`C-b` move screen up one page, cursor to last line
`C-f` move screen down one page, cursor to first line

`0` goto the starting of the current line.
`^` goto the first non blank character of the line.
`$` goto the end of the current line.

`''` goto last location (start of line)
\`\` goto last location

`mk` mark current position as k (can be any letter)
\`k return to position "k"

`H` goto the first line of current screen.
`L` goto the last line of current screen.

`e` end of word
`b` prev word
`w` next word
(also: E, B, W)

`{` start of paragraph
`}` end of paragraph

`gg` start of file
`G` end of file

`f{char}` jump to next occurrence of {char} in line
`F{char}` jump to prev ...

`*` goto next occurance of word under cursor
`#` goto prev occurance of word under cursor

`%` goto matching parens

`set path=$PWD/**` and then `:find filename` (+tab completion)

`/txt` search for next occurance
`?txt` search for prev occurance

`:hls` highlight all search matches
`:set nohlsearch` turn off the previous option completely
`:noh` turn off search highlight until next search

# Filesystem Navigation
`:e file` open file
`:n file1 file2` multiple files
`:Ex ~` browse a dir to open file from
`:E` browse
`:Sex` horizontal split
`:Vex` vertical split
`:Tex` new tab + browse

# evil
{% highlight emacs-lisp %}
(use-package evil :ensure t
  :init (setq evil-want-C-u-scroll t)
  :config (evil-mode t))
{% endhighlight %}

add to `~/.tmux.conf`: `set -s escape-time 0` [why?](https://evil.readthedocs.io/en/latest/faq.html#problems-with-the-escape-key-in-the-terminal)

# Config
{% highlight vim %}
syntax on
set showmatch
set ruler
set tabstop=2 softtabstop=0 expandtab shiftwidth=2 smarttab
set ai
set relativenumber
set path=$PWD/**
{% endhighlight %}

`tabstop` `ts` The width of a hard tabstop measured in "spaces" -- effectively the (maximum) width of an actual tab character.

`shiftwidth` `sw` The size of an "indent". It's also measured in spaces, so if your code base indents with tab characters then you want shiftwidth to equal the number of tab characters times tabstop. This is also used by things like the =, > and < commands.

`softtabstop` `sts` Setting this to a non-zero value other than tabstop will make the tab key (in insert mode) insert a combination of spaces (and possibly tabs) to simulate tab stops at this width.

`expandtab` `et` Enabling this will make the tab key (in insert mode) insert spaces instead of tab characters. This also affects the behavior of the retab command.

`smarttab` Enabling this will make the tab key (in insert mode) insert spaces or tabs to go to the next indent of the next tabstop when the cursor is at the beginning of a line (i.e. the only preceding characters are whitespace).
