---
layout: post
title:  "VI"
date:   2022-05-27
---

`:h` `:help`

`.` repeat last command
`C-g` show status

`ZZ` `:x` `:wq` save current file & exit
`ZQ` exit without saving

`:w` save current file
`:wa` save all files

`q:` command history
`q/` search history

`:display` show registers
`:pwd`

`:set list` / `:set nolist` show/hide whitespace

# Text Editing
`i` insert before cursor
`a` insert after cursor

`A` insert @ end of line
`I` insert @ start of line

`o` begin a new line below the cursor and insert text
`O` same, above cursor

`C-r` redo
`u` undo

`C-v` block visual mode
`V` line visual mode
(when in visual mode, `I` for insert-mode, then ESC to apply inserts across all lines.)

`V{line_no}G` select lines upto `{line_no}`

`=` re-indent
`gqq` format/wrap line (control w/ `:set tw=80`)

`y` yank selection
`yy` yank current line including newline
`{n}yy` yank `n` lines
`:%y` yank entire file

`"*y` copy to clipboard
`"*p` paste from clipboard
`gg"+yG` - copy entire file to clipboar (`+` is clipboard buffer)

`p` paste yanked / deleted content
`P` paste before cusror

`x` delete character
`X` delete character backwards
`s` delete character and enter insert

`db` delete word backwords
`de` delete word forwards

`d$` `D` delete to end of line
`dh` delete one char backward
`dd` delete line
`dj` delete two lines

`di"` delete inside double quotes

`dit` delete inside html tag
`dat` delete outer html tag

`dib` delete a block surrounded by (
`diB` delete a block surrrouned by {

`das` delete a sentence
`dap` delete a paragraph

`dG` delete from current position to end of file

also: `dvj` etc, `v` toggles inclusivity (`:h inclusive`)

`{n}dd` delete `n` lines
`d{n}gg` delete from current line to line `n`
`:{a},{b}d` delete lines `a` to `b`
`:,{b}d` delete lines from current until `b`

`daw` delete word under cursor
`caw` delete word under cursor and enter insert mode

`ggdG` delete everything

`cc` `S` delete current line and start insert mode
`ce` "change" motion: will delete the next word and put you in insert mode
(also, `c$` etc)

`cc`, `dd`, `yy` apply to current line

`C-w` (in insert mode) delete last word

`:r filename` insert content of filename
`23:r filename` insert after line 23

`rx` replace char under cursor with x

`>` indent
`V` (visual mode) -> `>` indent block

`>iB` indent curly block (from anywhere in the block)
`>%` indent curly block, cursor on one of braces

`=iB` format curly block
`=%` format block, put cursor on one of braces

`:'<,'>s/$/{msg}/` insert `{msg}` at end of selected lines (w/ `V`)

`:4,8>` indent lines 4 to 8, inclusive
`set sw=4` setwidth

## Macros / Recording
`:help recording`

- start recording with `q{letter}`
- end recording with `q` again

records everything you type (search, movement, replacement)

replay w/ `@{letter}`

`{letter}` designates a register, the same registers used by delete, yank and put. This means you can yank text into a register and then execute it as a command.

`@@` repeat macro
`100@m` repeat macro recorded to `m` 100 times

## Registers
`"kyy` copy current line to register `k`
`"Kyy` append

`"kp` paste contents of register `k`

`:reg` display contents of all registers

if you yank text without assigning it to a particular register, it will be assigned to the `0` register, as well as the default `"` register.

`0` vs `"`: `0` populated w/ only yanked text, while `"` also `ontains deleted text (from d/x/c/s)

register `1` holds last deletion / change(?)
register `2` holds second last deletion / change(?)
etc. (up to `9`)

`"` is the command to use a register for the next command
`"*` or `"+` clipboard
`"/` last search command
`":` last command-line command
`"_` is the `/dev/null` of registers (`noremap x "_x` deletes single chars without updating default register)

while in ex-mode command (?), `C-r {register}` to paste the contents of `{register}` (e.g. useful for search/replace, pasting the string you want to replace)

## Markers
`'a` point to beginning of line of the marker
`a points to exact location

### Comment out a block
1. mark w/ `ma`
2. go to end of block
3. `:'a,.s/^/#`

### Move a Block w/ markers
1. mark w/ `ma`
2. go to end of block, `mb`
3. go to target location, `:'a,'bmo .`

### Yank to a register
1. mark w/ `ma`
2. go to end of block
3. `:'a,.ya a` yank block into register `a`
4. `:'a,.ya A` append block to contents of register `a`

### Delete all lines from current to marked one
goto starting line and type `ma` (mark a)
then goto last line and `d'a` (delete to mark a)

## Find Replace
[https://vim.fandom.com/wiki/Search_and_replace](https://vim.fandom.com/wiki/Search_and_replace)

`:s/foo/bar/g` replace foo w/ bar in current line
`:%s/foo/bar/g` replace ... in all lines
`:%s/foo/bar/gc` replace in all lines + ask for confirmation
`:%s/\<foo\>/bar/gc` whole words + confirm
`:%s/foo/bar/gci` case insensitive + confirm

`:%s/\<\@!\([A-Z]\)/\-\l\1/g` replace `camelCaseName` to `camel-case-name`

## Rename Variable
- place caret on variable usage
- `gd` goto local definition
- `[{` goto start of scope
- `V` visual select
- `%` goto end of scope
- `:'<,'>s//newname/gc` search & replace w/ confirm

# Windows / Buffers
`C-w v` vertical split
`C-w s` horizontal split

`C-w w` next window (?)
`C-w o` close other windows / keep active window only
`C-w c` close current window (keep buffer open)

`C-w r` move current window to the right
`C-w =` make all splits equal size

`C-w -/+` resize height (`{n}C-w -`)
`C-w >/<` resize width

`:ls` list buffers
`:b1` goto buffer #1
`:bn` next buffer
`:bd` delete buffer
`:bw` wipe buffer (difference from `:bdelete` ?)

`:enew` create empty buffer
`:new` or `C-w n` new window & buffer in horizontal split
`:vnew` same as `:new` but vertical split

`:file <name>` name buffer
`:0f` clear buffer name

`:q` close window + buffer (?)

`:vertical sball` open all buffers in vertical split

# Tabs
`:Tex` open new tab and open fs browser
`:tabnew <filepath>`

`gt` next tab
`gT` prev tab
`{n}gt` switch to tab `n`

`gd` jump to local definition
`C-]` jump to tag

`:tabl` last tab
`:tabclose`

# Text Navigation
`:help mark-motions`
`:help jump-motions`

`:set relativenumber` relative line numbers

`5j` jump 5 lines down
`5k` jump 5 lines up

`zz` move current line to middle of screen
`zt` move current line to top of screen
`zb` move current line to bottom of screen

`H` move caret top line (HIGH)
`M` move caret middle line (MIDDLE)
`L` move caret bottom line (LOW)

`C-y` move screen up one line
`C-e` move screen down one line
`C-u` move cursor & screen up 1/2 page
`C-d` move cursor & screen down 1/2 page
`C-b` move screen up one page, cursor to last line
`C-f` move screen down one page, cursor to first line

`0` goto the starting of the current line.
`^` goto the first non blank character of the line.
`$` goto the end of the current line.

`''` goto last location (start of line)
\`\` goto last location

`mk` mark current position as k (can be any letter)
`k return to position "k"

`H` goto the first line of current screen.
`L` goto the last line of current screen.

`e` move cursor to last char of current word
`w` next word
`b` prev word (the inverse of `w`)
(also: `E`, `B`, `W` for jumping "whole" words e.g. `jump-over-this`)

`{` start of paragraph
`}` end of paragraph

`gg` start of file
`G` end of file
`:42` `42gg` `42G` goto line 42 (absolute)

`f{char}` jump to next occurrence of {char} in line
`F{char}` jump to prev ...

`*` goto next occurance of word under cursor
`#` goto prev occurance of word under cursor

`%` goto matching parens
`[{` goto scope start

`set path=$PWD/**` and then `:find filename` (+tab completion)

`/txt` search for next occurance
`?txt` search for prev occurance

`:hls` highlight all search matches
`:set nohlsearch` turn off the previous option completely
`:noh` turn off search highlight until next search

`:set ignorecase` use `\c` anywhere in search query to ignore case, `\C` to match case.

# Filesystem Navigation
`:e file` open file
`:n file1 file2` multiple files
`:Ex ~` browse a dir to open file from
`:E` browse
`:Sex` horizontal split
`:Vex` vertical split
`:Tex` new tab + browse

# evil
{% highlight emacs-lisp %}
((use-package evil :ensure t
  :init
  (setq evil-want-C-u-scroll t)
  (setq evil-default-state 'normal) ;; 'emacs
  :config (evil-mode t))
{% endhighlight %}

add to `~/.tmux.conf`: `set -s escape-time 0` [why?](https://evil.readthedocs.io/en/latest/faq.html#problems-with-the-escape-key-in-the-terminal)

# IdeaVIM
`~/.ideavimrc`

{% highlight vim %}
set clipboard+=unnamed
set relativenumber
set number
set ignorecase
{% endhighlight %}

# Config
`~/.vimrc`

{% highlight vim %}
syntax on
set showmatch
set ruler
set tabstop=2 softtabstop=0 expandtab shiftwidth=2 smarttab
set ai
set relativenumber
set path=$PWD/**
set ignorecase
{% endhighlight %}


`tabstop` `ts` The width of a hard tabstop measured in "spaces" -- effectively the (maximum) width of an actual tab character.

`shiftwidth` `sw` The size of an "indent". It's also measured in spaces, so if your code base indents with tab characters then you want shiftwidth to equal the number of tab characters times tabstop. This is also used by things like the =, > and < commands.

`softtabstop` `sts` Setting this to a non-zero value other than tabstop will make the tab key (in insert mode) insert a combination of spaces (and possibly tabs) to simulate tab stops at this width.

`expandtab` `et` Enabling this will make the tab key (in insert mode) insert spaces instead of tab characters. This also affects the behavior of the retab command.

`smarttab` Enabling this will make the tab key (in insert mode) insert spaces or tabs to go to the next indent of the next tabstop when the cursor is at the beginning of a line (i.e. the only preceding characters are whitespace).

`:set ts?` (etc) gives current value of option
`:set vimrcpaths?`
`:set vimrc?`

# Other
`Alt-Shift-P` show param hint
`Alt-/` autocomplete
`Alt-Ctrl-.` show implementations / extending classes
`Alt-i` file layout / jump to function in current file

Build
Re-Build (clean)

Run
Run (choose)
Debug
Debug (choose)

## Debugging
Step Over
Step In
Step Out
